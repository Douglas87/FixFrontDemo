<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.3.9.RELEASE</version>
	</parent>

	<groupId>com.example</groupId>
	<artifactId>FixFrontDemo</artifactId>
	<version>1.0.0-SNAPSHOT</version>
	<name>FXOFront</name>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter</artifactId>
			<exclusions>
				<exclusion>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-starter-logging</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-log4j2</artifactId>
		</dependency>

<!--		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-jdbc</artifactId>
		</dependency>-->

		<!--thymeleaf模板引擎配置-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-thymeleaf</artifactId>
		</dependency>

		<!--MyBatis配置-->
		<!--<dependency>
			<groupId>org.mybatis.spring.boot</groupId>
			<artifactId>mybatis-spring-boot-starter</artifactId>
			<version>2.1.0</version>
		</dependency>-->

		<!--MySQL数据库配置-->
<!--		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<version>5.1.46</version>
			<scope>runtime</scope>
		</dependency>-->

		<dependency>
			<systemPath>${project.basedir}/lib/quickfixj-core-2.2.0.jar</systemPath>
			<groupId>org.quickfixj</groupId>
			<artifactId>quickfixj-core</artifactId>
			<version>2.2.0</version>
			<scope>system</scope>
		</dependency>

		<dependency>
			<systemPath>${project.basedir}/lib/quickfixj-messages-fix42-2.2.0.jar</systemPath>
			<groupId>org.quickfixj</groupId>
			<artifactId>quickfixj-messages-fix42</artifactId>
			<version>2.2.0</version>
			<scope>system</scope>
		</dependency>

		<dependency>
			<systemPath>${project.basedir}/lib/quickfixj-messages-fix44-2.2.0.jar</systemPath>
			<groupId>org.quickfixj</groupId>
			<artifactId>quickfixj-messages-fix44</artifactId>
			<version>2.2.0</version>
			<scope>system</scope>
		</dependency>

		<dependency>
			<systemPath>${project.basedir}/lib/mina-core-2.1.3.jar</systemPath>
			<groupId>mina</groupId>
			<artifactId>mina-core</artifactId>
			<version>2.1.3</version>
			<scope>system</scope>
		</dependency>

		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-log4j12</artifactId>
			<version>2.0.9</version>
		</dependency>

		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<version>1.18.8</version>
		</dependency>

	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>

			<plugin>
				<!--maven 指定编译 -->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.8.1</version>
				<configuration>
					<source>1.8</source>
					<target>1.8</target>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.12.4</version>
				<configuration>
					<skipTests>true</skipTests>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<version>3.2.0</version>
				<configuration>
					<archive>
						<!-- 生成的jar中，包含pom.xml和pom.properties这两个文件 -->
						<addMavenDescriptor>true</addMavenDescriptor>
						<!-- 生成MANIFEST.MF的设置 -->
						<manifest>
							<!--这个属性特别关键，如果没有这个属性，有时候我们引用的包maven库
                            下面可能会有多个包，并且只有一个是正确的，其余的可能是带时间戳的，
                            此时会在classpath下面把那个带时间戳的给添加上去，
                            然后我们 在依赖打包的时候，打的是正确的，所以两头会对不上，报错。 -->
							<useUniqueVersions>false</useUniqueVersions>
							<!-- 为依赖包添加路径, 这些路径会写在MANIFEST文件的Class-Path下 -->
							<addClasspath>true</addClasspath>
							<!-- 这个jar所依赖的jar包添加classPath的时候的前缀，如果这个jar本身
                            和依赖包在同一级目录，则不需要添加 -->
							<classpathPrefix>lib/</classpathPrefix>
							<!-- jar启动入口类 -->
							<mainClass>com.czb.lhjypt.fxofront.Application</mainClass>
						</manifest>
						<manifestEntries>
							<!-- 在Class-Path下添加配置文件的路径 -->
							<Class-Path>conf/</Class-Path>
							<!-- 假如这个项目可能要引入一些外部资源，但是你打包的时候并不想把
                            这些资源文件打进包里面，这个时候你必须在这边额外指定一些这些资源
                            文件的路径，这个位置指定的话，要根据你预期的这些位置去设置，我这边
                            所有jar都在lib下，资源文件都在config下，lib和config是同级的
                            同时还需要注意另外一个问题，假如你的pom文件里面配置了
                            <scope>system</scope>,就是你依赖是你本地的资源，这个时候使用
                            这个插件，classPath里面是不会添加，所以你得手动把这个依赖添加进
                            这个地方，用空格隔开就行 -->
						</manifestEntries>
					</archive>
					<!-- jar包的位置 -->
					<outputDirectory>${project.build.directory}</outputDirectory>
					<excludes>
						<!-- 打jar包时，打包class文件和config目录下面的 properties文件 -->
						<!-- 有时候可能需要一些其他文件，这边可以配置，包括剔除的文件等等 -->
						<include>**/*.properties</include>
						<include>**/*.txt</include>
						<include>**/*.cfg</include>
						<include>**/*.xml</include>
					</excludes>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<version>2.7</version>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>${project.build.directory}/conf</outputDirectory>
							<resources>
								<resource>
									<directory>src/main/resources/</directory>
									<includes>
										<include>**/*.properties</include>
										<include>**/*.txt</include>
										<include>**/*.cfg</include>
										<include>**/*.xml</include>
									</includes>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>

		</plugins>
	</build>

</project>
